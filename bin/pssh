#!/usr/bin/env python
# -*- Mode: python -*-

# Copyright (c) 2009, Andrew McNabb
# Copyright (c) 2003-2008, Brent N. Chun

"""Parallel ssh to the set of nodes in hosts.txt.

For each node, this essentially does an "ssh host -l user prog [arg0] [arg1]
...". The -o option can be used to store stdout from each remote node in a
directory.  Each output file in that directory will be named by the
corresponding remote node's hostname or IP address.
"""

import fcntl
import os
import sys

parent, bindir = os.path.split(os.path.dirname(os.path.abspath(sys.argv[0])))
if os.path.exists(os.path.join(parent, 'psshlib')):
    sys.path.insert(0, parent)

from psshlib import psshutil
from psshlib.manager import Manager
from psshlib.task import Task
from psshlib.cli import common_parser, common_defaults

_DEFAULT_TIMEOUT = 60

def option_parser():
    parser = common_parser()
    parser.usage = "%prog [OPTIONS] command [...]"
    parser.epilog = "Example: pssh -h hosts.txt -l irb2 -o /tmp/foo uptime"
    parser.add_option('-i', '--inline', dest='inline', action='store_true',
            help='inline aggregated output for each server')
    parser.add_option('-I', '--send-input', dest='send_input',
            action='store_true',
            help='read from standard input and send as input to ssh')
    parser.add_option('-P', '--print', dest='print_out', action='store_true',
            help='print output as we get it')
    return parser

def parse_args():
    parser = option_parser()
    defaults = common_defaults(timeout=_DEFAULT_TIMEOUT)
    parser.set_defaults(**defaults)
    opts, args = parser.parse_args()
    if len(args) == 0 and not opts.send_input:
        parser.error('Command not specified.')

    if not opts.host_files and not opts.host_entries:
        parser.error('Hosts not specified.')

    return opts, args

def buffer_input():
    """Read any immediately available data from standard input.

    Doesn't work if stdin blocks for any reason.  This needs to be deprecated.
    """
    fileno = sys.stdin.fileno()
    origfl = fcntl.fcntl(fileno, fcntl.F_GETFL)
    fcntl.fcntl(fileno, fcntl.F_SETFL, origfl | os.O_NONBLOCK)
    try:
        # Python 3
        read_stdin = sys.stdin.buffer.read
    except AttributeError:
        # Python 2
        read_stdin = sys.stdin.read
    try:
        stdin = read_stdin()
    except IOError: # Stdin contained no information
        stdin = ""
    fcntl.fcntl(fileno, fcntl.F_SETFL, origfl)
    return stdin

def do_pssh(hosts, cmdline, opts):
    if opts.outdir and not os.path.exists(opts.outdir):
        os.makedirs(opts.outdir)
    if opts.errdir and not os.path.exists(opts.errdir):
        os.makedirs(opts.errdir)
    if opts.send_input:
        stdin = sys.stdin.read()
    else:
        stdin = buffer_input()
        if stdin:
            sys.stderr.write('Automatic reading from stdin is deprecated.  '
                    'Please use the -I option.\n')
    manager = Manager(opts)
    for host, port, user in hosts:
        if opts.common_password:
            cmd = ['sshpass', '-p', opts.common_password, 'ssh', host, '-o',
                   'NumberOfPasswordPrompts=1',
               	   '-o', 'SendEnv=PSSH_NODENUM PSSH_HOST']
        else:
            cmd = ['ssh', host, '-o', 'NumberOfPasswordPrompts=1',
        	   '-o', 'SendEnv=PSSH_NODENUM']
        if not opts.verbose:
            cmd.append('-q')
        if opts.options:
            cmd += ['-o', opts.options]
        if user:
            cmd += ['-l', user]
        if port:
            cmd += ['-p', port]
        if opts.extra:
            cmd.extend(opts.extra)
        if cmdline:
            cmd.append(cmdline)
        t = Task(host, port, user, cmd, opts, stdin)
        manager.add_task(t)
    manager.run()
   
if __name__ == "__main__":
    opts, args = parse_args()
    cmdline = " ".join(args)
    hosts = psshutil.read_hosts(opts.host_files, default_user=opts.user)
    if opts.host_entries:
        for entry in opts.host_entries:
            hosts.append(psshutil.parse_host(entry, default_user=opts.user))
    do_pssh(hosts, cmdline, opts)
